-- automatically generated by BNF Converter
module Main where

import System.IO ( stdin, hGetContents )
import System.Environment ( getArgs, getProgName )
import System.Exit ( exitFailure, exitSuccess )
import Control.Monad (when)
import System.Console.ANSI

import AST.LexLatte
import AST.ParLatte
import AST.SkelLatte
import AST.PrintLatte
import AST.AbsLatte

import Frontend.TypeChecker

import AST.ErrM

type ParseFun a = [Token] -> Err a

myLLexer = myLexer

type Verbosity = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

-- runFile :: (Print a, Show a) => Verbosity -> ParseFun a -> FilePath -> IO ()
-- runFile v p f = putStrLn f >> readFile f >>= run v p

run :: Verbosity -> ParseFun (Program (Maybe (Int, Int))) -> String -> IO ()
run v p s = let ts = myLLexer s in case p ts of
    Bad s -> putStrLn s >> exitFailure
    Ok  tree ->
        let typeChecked = typeCheck tree in
        printTypeCheckResult typeChecked >>
        case typeChecked of
            (BadChecked _) -> exitFailure
            (GoodChecked _) -> exitSuccess

showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree
 = do
      putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
      putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
    putStrLn $ unlines
        [ "usage: Call with one of the following argument combinations:"
        , "  --help          Display this help message."
        , "  (no arguments)  Parse stdin verbosely."
        , "  (files)         Parse content of files verbosely."
        , "  -s (files)      Silent mode. Parse content of files silently."
        ]
    exitFailure

printTypeCheckResult :: TypeCheckResult -> IO ()
printTypeCheckResult (GoodChecked pAst) = putStrLn "OK" >> putStr (show pAst)
printTypeCheckResult (BadChecked (m, err)) = setSGR [Reset] << case m of
        Nothing -> do
            setSGR [SetColor Foreground Vivid Red]
            putStr "ERROR: "
            print err
        Just (line, col) -> do
            setSGR [SetColor Foreground Vivid Red]
            setSGR [SetConsoleIntensity BoldIntensity]
            putStr $ "ERROR " ++ show line ++ ":" ++ show col ++ ": "
            setSGR [SetDefaultColor Foreground]
            setSGR [SetConsoleIntensity NormalIntensity]
            print err
    where (<<) = flip (>>)

main :: IO ()
main = do
    args <- getArgs
    case args of
        ["--help"] -> usage
        [] -> getContents >>= run 2 pProgram
        -- "-s":fs -> mapM_ (runFile 0 pProgram) fs
        -- fs -> mapM_ (runFile 2 pProgram) fs
